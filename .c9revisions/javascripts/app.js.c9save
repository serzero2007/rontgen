{"ts":1368210703387,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1368210673649,"patch":[[{"diffs":[[1,"var App = App || {};\nvar MathJax = MathJax || {};\n\n// $(function() {\n//     $('.bar').css({'width':'50%'})\n\n// \tApp.go()\n\n// \t$('.bar').css({'width':'100%'})\n\n// \tsetTimeout(function(){\n//         $('.overlay').fadeOut(100)\n// \t},500)\n\n//     MathJax.Hub.Register.StartupHook(\"End\",function () {\n//             $(\".output-show\").hide()\n//             $(\".output-hide\").fadeIn()\n//     });\n\n// });\n\nApp.go = function(){\n\t$.fn.quickdiff(\"filter\", \"mathSpanInline\",\n        function (node) {\n            return (node.nodeName === \"SPAN\" && $(node).hasClass(\"mathInline\"));\n        },\n        function (a, b) {\n            var aHTML = $.trim($(\"script\", a).html()), bHTML = $.trim($(b).html());\n            return (\"%%\" + aHTML + \"%%\") !== bHTML;\n        }\n    );\n\n    // // Setup a filter for comparing math spans.\n    $.fn.quickdiff(\"filter\", \"mathSpan\",\n        function (node) {\n            return (node.nodeName === \"SPAN\" && $(node).hasClass(\"math\"));\n        },\n        function (a, b) {\n            var aHTML = $.trim($(\"script\", a).html()), bHTML = $.trim($(b).html());\n            return (\"$$\" + aHTML + \"$$\") !== bHTML;\n        }\n    );\n\n    $.fn.quickdiff(\"attributes\", {\n        \"td\" : [\"align\"],\n        \"th\" : [\"align\"],\n        \"img\" : [\"src\", \"alt\", \"title\"],\n        \"a\" : [\"href\", \"title\"]\n    });\n\n    var initString = '## [Cheetah.io](http://cheetah.io) demo.\\n\\n'+\n        '> Sign up for the beta [here](http://cheetah.io). \\n\\n'+\n        'You can write LaTex and markdown. To use latex just surround your math in dollar signs. Single dollar sign for inline math and double ``$$`` for centered math.\\n\\n'+\n        '**For example:**\\n\\n'+\n        '$$x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac} }{2a}$$\\n\\n'+\n        'Your document is saved to localStorage.\\n\\n'+\n        '__Check out the code for this demo on [Github](http://github.com/eoinmurray/rontgen).__'\n        ;\n\n    if(typeof localStorage.editor === \"undefined\" ) localStorage.editor = initString;\n    if(localStorage.editor === \"\" ) localStorage.editor = initString;\n    var redrawNeeded = false, preproc, renderDelay = 0, timer, content = \"\";\n    var markdown = new Showdown.converter();\n\n    $.extend(markdown.config, {\n        stripHTML: true,\n        tables: true,\n        math: true,\n        figures: true\n    });\n\n    // Redraws the output using the content of the input.\n    var redraw = function () {\n        if (!redrawNeeded) {\n            return;\n        } else {\n            redrawNeeded = false;\n        }\n\n        var startTime = (new Date()).getTime();\n        var data = editor.getSession().getValue();\n    \n        data = data.replace(/\\$+/g, function(match) {\n            return match.length === 1 ? '%%' : match;\n        });\n        localStorage.editor = editor.getSession().getValue()\n        preproc = $(\"<div></div>\").html(markdown.makeHtml(data));\n        var patch = $(\"#output > div\").quickdiff(\"patch\", preproc, [\"mathSpan\", \"mathSpanInline\"]);\n\n        if (patch.type !== \"identical\" && patch.replace.length > 0) {\n            $.each(patch.replace, function (i, el) {\n                if (el.innerHTML) {\n                    MathJax.Hub.Typeset(el, function () {});\n                }\n            });\n        } else {\n        \n        }\n    };\n\n    var suppress_redraw = false;\n    var refreshModified = function() {\n        if (suppress_redraw) return;\n        redrawNeeded = true;\n        modified = editor.getSession().getValue() !== content;\n        if (timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(redraw, renderDelay);\n    }\n\n    var editor = ace.edit('editor');\n    editor.getSession().setUseWrapMode(true);\n    editor.setHighlightActiveLine(false);\n    editor.renderer.setShowGutter(false);\n\teditor.getSession().on('change', refreshModified);\n    if(localStorage.editor) editor.getSession().setValue(localStorage.editor)\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3863}]],"length":3863,"saved":false}
{"ts":1368210679414,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"// $(function() {\n//     $('.bar').css({'width':'50%'})\n\n// \tApp.go()\n\n// \t$('.bar').css({'width':'100%'})\n\n// \tsetTimeout(function(){\n//         $('.overlay').fadeOut(100)\n// \t},500)\n\n//     MathJax.Hub.Register.StartupHook(\"End\",function () {\n//             $(\".output-show\").hide()\n//             $(\".output-hide\").fadeIn()\n//     });\n\n// });\n\n"],[0,"App."]],"start1":47,"start2":47,"length1":355,"length2":8}]],"length":3516,"saved":false}
{"ts":1368210763168,"patch":[[{"diffs":[[0,"editor)\n"],[1,"    \n    this.editor = editor\n"],[0,"}\n\n\n"]],"start1":3504,"start2":3504,"length1":12,"length2":42}]],"length":3546,"saved":false}
{"ts":1368210839482,"patch":[[{"diffs":[[0,"ion () {});\n"],[1,"                    $(document).trigger('MathRender')\n"],[0,"            "]],"start1":2804,"start2":2804,"length1":24,"length2":78}]],"length":3600,"saved":false}
{"ts":1368210858345,"patch":[[{"diffs":[[0,"ine\"]);\n"],[1,"        $(document).trigger('MathRender')"],[0,"\n       "]],"start1":2587,"start2":2587,"length1":16,"length2":57}]],"length":3641,"saved":false}
{"ts":1368210863098,"patch":[[{"diffs":[[0,"ument).trigger('"],[-1,"Math"],[1,"Text"],[0,"Render')\n       "]],"start1":2608,"start2":2608,"length1":36,"length2":36}]],"length":3641,"saved":false}
