{"ts":1368202804042,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Jasmine boot.js for browser runners - exposes external/global interface, builds the Jasmine environment and executes it.\n(function() {\n  var env = jasmine.getEnv();\n\n  var jasmineInterface = {\n    describe: function(description, specDefinitions) {\n      return env.describe(description, specDefinitions);\n    },\n\n    xdescribe: function(description, specDefinitions) {\n      return env.xdescribe(description, specDefinitions);\n    },\n\n    it: function(desc, func) {\n      return env.it(desc, func);\n    },\n\n    xit: function(desc, func) {\n      return env.xit(desc, func);\n    },\n\n    beforeEach: function(beforeEachFunction) {\n      return env.beforeEach(beforeEachFunction);\n    },\n\n    afterEach: function(afterEachFunction) {\n      return env.afterEach(afterEachFunction);\n    },\n\n    expect: function(actual) {\n      return env.expect(actual);\n    },\n\n    pending: function() {\n      return env.pending();\n    },\n\n    addMatchers: function(matchers) {\n      return env.addMatchers(matchers);\n    },\n\n    spyOn: function(obj, methodName) {\n      return env.spyOn(obj, methodName);\n    },\n\n    clock: env.clock,\n    setTimeout: env.clock.setTimeout,\n    clearTimeout: env.clock.clearTimeout,\n    setInterval: env.clock.setInterval,\n    clearInterval: env.clock.clearInterval,\n\n    jsApiReporter: new jasmine.JsApiReporter(jasmine)\n  };\n\n  if (typeof window == \"undefined\" && typeof exports == \"object\") {\n    extend(exports, jasmineInterface);\n  } else {\n    extend(window, jasmineInterface);\n  }\n\n  var queryString = new jasmine.QueryString({\n    getWindowLocation: function() { return window.location; }\n  });\n\n  // TODO: move all of catching to raise so we don't break our brains\n  var catchingExceptions = queryString.getParam(\"catch\");\n  env.catchExceptions(typeof catchingExceptions === \"undefined\" ? true : catchingExceptions);\n\n  var htmlReporter = new jasmine.HtmlReporter({\n    env: env,\n    queryString: queryString,\n    onRaiseExceptionsClick: function() { queryString.setParam(\"catch\", !env.catchingExceptions()); },\n    getContainer: function() { return document.body; },\n    createElement: function() { return document.createElement.apply(document, arguments); },\n    createTextNode: function() { return document.createTextNode.apply(document, arguments); }\n  });\n\n  env.addReporter(jasmineInterface.jsApiReporter);\n  env.addReporter(htmlReporter);\n\n  var specFilter = new jasmine.HtmlSpecFilter({\n    filterString: function() { return queryString.getParam(\"spec\"); }\n  });\n\n  env.specFilter = function(spec) {\n    return specFilter.matches(spec.getFullName());\n  };\n\n  var currentWindowOnload = window.onload;\n\n  window.onload = function() {\n    if (currentWindowOnload) {\n      currentWindowOnload();\n    }\n    htmlReporter.initialize();\n    env.execute();\n  };\n\n  function extend(destination, source) {\n    for (var property in source) destination[property] = source[property];\n    return destination;\n  }\n\n}());\n"]],"start1":0,"start2":0,"length1":0,"length2":2937}]],"length":2937}
