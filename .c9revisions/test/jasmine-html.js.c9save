{"ts":1368202798723,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\nCopyright (c) 2008-2013 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\njasmine.HtmlReporter = function(options) {\n  var env = options.env || {},\n    getContainer = options.getContainer,\n    now = options.now || function() { return new Date().getTime();},\n    createElement = options.createElement,\n    createTextNode = options.createTextNode,\n    results = [],\n    startTime,\n    specsExecuted = 0,\n    failureCount = 0,\n    pendingSpecCount = 0,\n    htmlReporterMain,\n    symbols;\n\n  this.initialize = function() {\n    htmlReporterMain = createDom(\"div\", {className: \"html-reporter\"},\n      createDom(\"div\", {className: \"banner\"},\n        createDom(\"span\", {className: \"title\"}, \"Jasmine\"),\n        createDom(\"span\", {className: \"version\"}, jasmine.version)\n      ),\n      createDom(\"ul\", {className: \"symbol-summary\"}),\n      createDom(\"div\", {className: \"alert\"}),\n      createDom(\"div\", {className: \"results\"},\n        createDom(\"div\", {className: \"failures\"})\n      )\n    );\n    getContainer().appendChild(htmlReporterMain);\n\n    symbols = find(\".symbol-summary\")[0];\n  };\n\n  var totalSpecsDefined;\n  this.jasmineStarted = function(options) {\n    totalSpecsDefined = options.totalSpecsDefined || 0;\n    startTime = now();\n  };\n\n  var summary = createDom(\"div\", {className: \"summary\"});\n\n  var topResults = new jasmine.ResultsNode({}, \"\", null),\n    currentParent = topResults;\n\n  this.suiteStarted = function(result) {\n    currentParent.addChild(result, \"suite\");\n    currentParent = currentParent.last();\n  };\n\n  this.suiteDone = function(result) {\n    if (currentParent == topResults) {\n      return;\n    }\n\n    currentParent = currentParent.parent;\n  };\n\n  this.specStarted = function(result) {\n    currentParent.addChild(result, \"spec\");\n  };\n\n  var failures = [];\n  this.specDone = function(result) {\n    if (result.status != \"disabled\") {\n      specsExecuted++;\n    }\n\n    symbols.appendChild(createDom(\"li\", {\n        className: result.status,\n        id: \"spec_\" + result.id}\n    ));\n\n    if (result.status == \"failed\") {\n      failureCount++;\n\n      var failure =\n        createDom(\"div\", {className: \"spec-detail failed\"},\n          createDom(\"a\", {className: \"description\", title: result.fullName, href: specHref(result)}, result.fullName),\n          createDom(\"div\", {className: \"messages\"})\n        );\n      var messages = failure.childNodes[1];\n\n      for (var i = 0; i < result.failedExpectations.length; i++) {\n        var expectation = result.failedExpectations[i];\n        messages.appendChild(createDom(\"div\", {className: \"result-message\"}, expectation.message));\n        messages.appendChild(createDom(\"div\", {className: \"stack-trace\"}, expectation.stack));\n      }\n\n      failures.push(failure);\n    }\n\n    if(result.status == \"pending\") {\n      pendingSpecCount++;\n    }\n  };\n\n  this.jasmineDone = function() {\n    var elapsed = now() - startTime;\n\n    var banner = find(\".banner\")[0];\n    banner.appendChild(createDom(\"span\", {className: \"duration\"}, \"finished in \" + elapsed / 1000 + \"s\"));\n\n    var alert = find(\".alert\")[0];\n\n    alert.appendChild(createDom(\"span\", { className: \"exceptions\" },\n      createDom(\"label\", { className: \"label\", 'for': \"raise-exceptions\" }, \"raise exceptions\"),\n      createDom(\"input\", {\n        className: \"raise\",\n        id: \"raise-exceptions\",\n        type: \"checkbox\"\n      })\n    ));\n    var checkbox = find(\"input\")[0];\n\n    checkbox.checked = !env.catchingExceptions();\n    checkbox.onclick = options.onRaiseExceptionsClick;\n\n    if (specsExecuted < totalSpecsDefined) {\n      var skippedMessage = \"Ran \" + specsExecuted + \" of \" + totalSpecsDefined + \" specs - run all\";\n      alert.appendChild(\n        createDom(\"span\", {className: \"bar skipped\"},\n          createDom(\"a\", {href: \"?\", title: \"Run all specs\"}, skippedMessage)\n        )\n      );\n    }\n    var statusBarMessage = \"\" + pluralize(\"spec\", specsExecuted) + \", \" + pluralize(\"failure\", failureCount);\n    if(pendingSpecCount) { statusBarMessage += \", \" + pluralize(\"pending spec\", pendingSpecCount); }\n\n    var statusBarClassName = \"bar \" + ((failureCount > 0) ? \"failed\" : \"passed\");\n    alert.appendChild(createDom(\"span\", {className: statusBarClassName}, statusBarMessage));\n\n    var results = find(\".results\")[0];\n    results.appendChild(summary);\n\n    summaryList(topResults, summary);\n\n    function summaryList(resultsTree, domParent) {\n      var specListNode;\n      for (var i = 0; i < resultsTree.children.length; i++) {\n        var resultNode = resultsTree.children[i];\n        if (resultNode.type == \"suite\") {\n          var suiteListNode = createDom(\"ul\", {className: \"suite\", id: \"suite-\" + resultNode.result.id},\n            createDom(\"li\", {className: \"suite-detail\"},\n              createDom(\"a\", {href: specHref(resultNode.result)}, resultNode.result.description)\n            )\n          );\n\n          summaryList(resultNode, suiteListNode);\n          domParent.appendChild(suiteListNode);\n        }\n        if (resultNode.type == \"spec\") {\n          if (domParent.getAttribute(\"class\") != \"specs\") {\n            specListNode = createDom(\"ul\", {className: \"specs\"});\n            domParent.appendChild(specListNode);\n          }\n          specListNode.appendChild(\n            createDom(\"li\", {\n                className: resultNode.result.status,\n                id: \"spec-\" + resultNode.result.id\n              },\n              createDom(\"a\", {href: specHref(resultNode.result)}, resultNode.result.description)\n            )\n          );\n        }\n      }\n    }\n\n    if (failures.length) {\n      alert.appendChild(\n        createDom('span', {className: \"menu bar spec-list\"},\n          createDom(\"span\", {}, \"Spec List | \"),\n          createDom('a', {className: \"failures-menu\", href: \"#\"}, \"Failures\")));\n      alert.appendChild(\n        createDom('span', {className: \"menu bar failure-list\"},\n          createDom('a', {className: \"spec-list-menu\", href: \"#\"}, \"Spec List\"),\n          createDom(\"span\", {}, \" | Failures \")));\n\n      find(\".failures-menu\")[0].onclick = function() {\n        setMenuModeTo('failure-list');\n      };\n      find(\".spec-list-menu\")[0].onclick = function() {\n        setMenuModeTo('spec-list');\n      };\n\n      setMenuModeTo('failure-list');\n\n      var failureNode = find(\".failures\")[0];\n      for (var i = 0; i < failures.length; i++) {\n        failureNode.appendChild(failures[i]);\n      }\n    }\n  };\n\n  return this;\n\n  function find(selector) {\n    if (selector.match(/^\\./)) {\n      var className = selector.substring(1);\n      return getContainer().getElementsByClassName(className);\n    } else {\n      return getContainer().getElementsByTagName(selector);\n    }\n  }\n\n  function createDom(type, attrs, childrenVarArgs) {\n    var el = createElement(type);\n\n    for (var i = 2; i < arguments.length; i++) {\n      var child = arguments[i];\n\n      if (typeof child === 'string') {\n        el.appendChild(createTextNode(child));\n      } else {\n        if (child) {\n          el.appendChild(child);\n        }\n      }\n    }\n\n    for (var attr in attrs) {\n      if (attr == \"className\") {\n        el[attr] = attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    }\n\n    return el;\n  }\n\n  function pluralize(singular, count) {\n    var word = (count == 1 ? singular : singular + \"s\");\n\n    return \"\" + count + \" \" + word;\n  }\n\n  function specHref(result) {\n    return \"?spec=\" + encodeURIComponent(result.fullName);\n  }\n\n  function setMenuModeTo(mode) {\n    htmlReporterMain.setAttribute(\"class\", \"html-reporter \" + mode);\n  }\n};\njasmine.HtmlSpecFilter = function(options) {\n  var filterPattern = new RegExp(options && options.filterString());\n\n  this.matches = function(specName) {\n    return filterPattern.test(specName);\n  };\n};\njasmine.ResultsNode = function(result, type, parent) {\n  this.result = result;\n  this.type = type;\n  this.parent = parent;\n\n  this.children = [];\n\n  this.addChild = function(result, type) {\n    this.children.push(new jasmine.ResultsNode(result, type, this));\n  };\n\n  this.last = function() {\n    return this.children[this.children.length-1];\n  };\n};\njasmine.QueryString = function(options) {\n\n  this.setParam = function(key, value) {\n    var paramMap = queryStringToParamMap();\n    paramMap[key] = value;\n    options.getWindowLocation().search = toQueryString(paramMap);\n  };\n\n  this.getParam = function(key) {\n    return queryStringToParamMap()[key];\n  };\n\n  return this;\n\n  function toQueryString(paramMap) {\n    var qStrPairs = [];\n    for (var prop in paramMap) {\n      qStrPairs.push(encodeURIComponent(prop) + \"=\" + encodeURIComponent(paramMap[prop]));\n    }\n    return \"?\" + qStrPairs.join('&');\n  }\n\n  function queryStringToParamMap() {\n    var paramStr = options.getWindowLocation().search.substring(1),\n      params = [],\n      paramMap = {};\n\n    if (paramStr.length > 0) {\n      params = paramStr.split('&');\n      for (var i = 0; i < params.length; i++) {\n        var p = params[i].split('=');\n        var value = decodeURIComponent(p[1]);\n        if (value === \"true\" || value === \"false\") {\n          value = JSON.parse(value);\n        }\n        paramMap[decodeURIComponent(p[0])] = value;\n      }\n    }\n\n    return paramMap;\n  }\n\n};"]],"start1":0,"start2":0,"length1":0,"length2":10179}]],"length":10179}
